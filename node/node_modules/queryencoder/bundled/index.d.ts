// Generated by dts-bundle v0.7.3

declare module 'queryencoder' {
    import { Options, QueryParms } from 'queryencoder/types';
    export * from 'queryencoder/types';
    /**
      * The function that encodes the given object with the params into an url query string.
      * @param queryParams The query params object to encode.
      * @param options The [[Options]] passed to the function.
      * @returns The obtained url query string.
      */
    export function encode(queryParams: QueryParms, options?: Options): string;
}

declare module 'queryencoder/types' {
    export * from 'queryencoder/types/options';
    export * from 'queryencoder/types/queryparams';
}

declare module 'queryencoder/types/options' {
    /**
        * The interface of the options internally used by the function [[encode]]
        */
    export interface InternalOptions {
            /**
                * If '?' will be added to the begin of the result, in case the result is not empty. Default value: true
                */
            addQuestionMark: boolean;
            /**
                * If a value is of boolean type, it will be just declared if true while omitted if false. (e.g. &val) Default value: false
                */
            shortBoolean: boolean;
            /**
                * If, in case there is a nested object, a parameter with value true for each path to the parents will be added. Default value: true
                */
            flagNestedParents: boolean;
            /**
                * If all the null values will be kept and parsed as 'null'. Default value: true
                */
            preserveNull: boolean;
            /**
                * If all the undefined values will be kept and parsed as 'undefined'. Default value: false
                */
            preserveUndefined: boolean;
            /**
                * The function used to parse the dates. Default value: value => value.toISOString()
                */
            dateParser: (value: Date) => string;
    }
    export type Options = Partial<InternalOptions>;
}

declare module 'queryencoder/types/queryparams' {
    /** The value that a query param can have */
    export type QueryValue = string | number | boolean | Date | null | undefined;
    /** The query params interface that is passed to the function [[encode]]. It is a (nested) object of [[QueryValue]] */
    export interface QueryParms {
        [param: string]: QueryValue | QueryParms;
    }
}

